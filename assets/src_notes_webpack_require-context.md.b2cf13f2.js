import{_ as s,c as n,o as a,Q as l}from"./chunks/framework.30f3a391.js";const p=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"src/notes/webpack/require-context.md","filePath":"src/notes/webpack/require-context.md","lastUpdated":1683717698000}'),e={name:"src/notes/webpack/require-context.md"},o=[l('<h2 id="带表达式的-require-语句" tabindex="-1">带表达式的 require 语句 <a class="header-anchor" href="#带表达式的-require-语句" aria-label="Permalink to &quot;带表达式的 require 语句&quot;">​</a></h2><blockquote><p>如果你的require参数含有表达式(expressions), 会创建一个上下文（context），因为在编译时（compile time）并不清楚具体是哪一个模块被导入</p></blockquote><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;./template/&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> name </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;.ejs&quot;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;./template/&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> name </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;.ejs&quot;</span><span style="color:#24292E;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>webpack 解析 require() 的调用，提取出来如下这些信息：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">Directory: ./template</span></span>\n<span class="line"><span style="color:#e1e4e8;">Regular expression: /^.*\\.ejs$/</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">Directory: ./template</span></span>\n<span class="line"><span style="color:#24292e;">Regular expression: /^.*\\.ejs$/</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>则会返回template目录下的所有后缀为.ejs模板的引用，包含子目录。</p><h2 id="require-context" tabindex="-1">require.context <a class="header-anchor" href="#require-context" aria-label="Permalink to &quot;require.context&quot;">​</a></h2><p>可以使用 require.context()方法来创建自己的（模块）上下文，这个方法有3个参：</p><ul><li>要搜索的文件夹目录</li><li>是否还应该搜索它的子目录</li><li>以及一个匹配文件的正则表达式</li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">require.</span><span style="color:#B392F0;">context</span><span style="color:#E1E4E8;">(directory,useSubdirectories </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,regExp </span><span style="color:#F97583;">=</span><span style="color:#DBEDFF;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">^</span><span style="color:#85E89D;font-weight:bold;">\\.\\/</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">require.</span><span style="color:#B392F0;">context</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;./test&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span><span style="color:#DBEDFF;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#85E89D;font-weight:bold;">\\.</span><span style="color:#DBEDFF;">test</span><span style="color:#85E89D;font-weight:bold;">\\.</span><span style="color:#DBEDFF;">js</span><span style="color:#F97583;">$</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#6A737D;">// （创建了）一个包含了 test 文件夹（不包含子目录）下面的、所有文件名以`.test.js` 结尾的、能被require 请求到的文件的上下文。</span></span>\n<span class="line"></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">require.</span><span style="color:#B392F0;">context</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;../&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span><span style="color:#DBEDFF;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#85E89D;font-weight:bold;">\\.</span><span style="color:#DBEDFF;">stories</span><span style="color:#85E89D;font-weight:bold;">\\.</span><span style="color:#DBEDFF;">js</span><span style="color:#F97583;">$</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#6A737D;">// (创建了)一个包含了父级文件夹（包含子目录）下面，所有文件名以 `.stories.js` 结尾的文件的上下文。</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"></span>\n<span class="line"><span style="color:#24292E;">require.</span><span style="color:#6F42C1;">context</span><span style="color:#24292E;">(directory,useSubdirectories </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">,regExp </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> /</span><span style="color:#D73A49;">^</span><span style="color:#22863A;font-weight:bold;">\\.\\/</span><span style="color:#032F62;">/</span><span style="color:#24292E;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">require.</span><span style="color:#6F42C1;">context</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;./test&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">,</span><span style="color:#032F62;"> /</span><span style="color:#22863A;font-weight:bold;">\\.</span><span style="color:#032F62;">test</span><span style="color:#22863A;font-weight:bold;">\\.</span><span style="color:#032F62;">js</span><span style="color:#D73A49;">$</span><span style="color:#032F62;">/</span><span style="color:#24292E;">);</span></span>\n<span class="line"><span style="color:#6A737D;">// （创建了）一个包含了 test 文件夹（不包含子目录）下面的、所有文件名以`.test.js` 结尾的、能被require 请求到的文件的上下文。</span></span>\n<span class="line"></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">require.</span><span style="color:#6F42C1;">context</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;../&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span><span style="color:#032F62;"> /</span><span style="color:#22863A;font-weight:bold;">\\.</span><span style="color:#032F62;">stories</span><span style="color:#22863A;font-weight:bold;">\\.</span><span style="color:#032F62;">js</span><span style="color:#D73A49;">$</span><span style="color:#032F62;">/</span><span style="color:#24292E;">);</span></span>\n<span class="line"><span style="color:#6A737D;">// (创建了)一个包含了父级文件夹（包含子目录）下面，所有文件名以 `.stories.js` 结尾的文件的上下文。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><blockquote><p>require.context 模块导出（返回）一个（require）函数，这个函数可以接收一个参数：request 函数-这里的 request 应该是指在 require() 语句中的表达式</p></blockquote><p>导出的方法有 3 个属性：resolve,keys,id</p><ul><li><p>resolve 是一个函数，它返回请求被解析后得到的模块id。</p></li><li><p>keys 也是一个函数，他返回一个数组，由所有可能被上下文模块处理的请求组成。</p></li><li><p>id 是上下文模块里面所包含的模块 id. 它可能在你使用 module.hot.accept 的时候被用到</p></li><li></li></ul><p>Vue 全局组件：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">install</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">Vue</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/*</span></span>\n<span class="line"><span style="color:#6A737D;">   所有在./components目录下的.vue组件自动注册为全局组件</span></span>\n<span class="line"><span style="color:#6A737D;">   以&lt;mv-***&gt;&lt;/mv-***&gt;为组件标签名，***是组件的.name，没有name的时候是组件的文件名</span></span>\n<span class="line"><span style="color:#6A737D;">  */</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">requireAll</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">context</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> context.</span><span style="color:#B392F0;">keys</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(context);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">component</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> require.</span><span style="color:#B392F0;">context</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;./components&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span><span style="color:#DBEDFF;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#85E89D;font-weight:bold;">\\.</span><span style="color:#DBEDFF;">vue</span><span style="color:#F97583;">$</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// const directive = require.context(&#39;./directives&#39;, false, /\\.js$/);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">requireAll</span><span style="color:#E1E4E8;">(component).</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">item</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">name</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (item.name </span><span style="color:#F97583;">||</span><span style="color:#DBEDFF;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">(</span><span style="color:#79B8FF;">\\S</span><span style="color:#F97583;">+</span><span style="color:#85E89D;font-weight:bold;">\\/</span><span style="color:#DBEDFF;">)(</span><span style="color:#79B8FF;">\\S</span><span style="color:#F97583;">+</span><span style="color:#DBEDFF;">)</span><span style="color:#85E89D;font-weight:bold;">\\.</span><span style="color:#DBEDFF;">vue</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">exec</span><span style="color:#E1E4E8;">(item.hotID)[</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">]).</span><span style="color:#B392F0;">toLowerCase</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#E1E4E8;">   Vue.</span><span style="color:#B392F0;">component</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">`mv-${</span><span style="color:#E1E4E8;">name</span><span style="color:#9ECBFF;">}`</span><span style="color:#E1E4E8;">, item);</span></span>\n<span class="line"><span style="color:#E1E4E8;"> });</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">install</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">Vue</span><span style="color:#24292E;">) {</span></span>\n<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;">/*</span></span>\n<span class="line"><span style="color:#6A737D;">   所有在./components目录下的.vue组件自动注册为全局组件</span></span>\n<span class="line"><span style="color:#6A737D;">   以&lt;mv-***&gt;&lt;/mv-***&gt;为组件标签名，***是组件的.name，没有name的时候是组件的文件名</span></span>\n<span class="line"><span style="color:#6A737D;">  */</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">requireAll</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#E36209;">context</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> context.</span><span style="color:#6F42C1;">keys</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(context);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">component</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> require.</span><span style="color:#6F42C1;">context</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;./components&#39;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">,</span><span style="color:#032F62;"> /</span><span style="color:#22863A;font-weight:bold;">\\.</span><span style="color:#032F62;">vue</span><span style="color:#D73A49;">$</span><span style="color:#032F62;">/</span><span style="color:#24292E;">);</span></span>\n<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;">// const directive = require.context(&#39;./directives&#39;, false, /\\.js$/);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">requireAll</span><span style="color:#24292E;">(component).</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">((</span><span style="color:#E36209;">item</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>\n<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">name</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (item.name </span><span style="color:#D73A49;">||</span><span style="color:#032F62;"> /(</span><span style="color:#005CC5;">\\S</span><span style="color:#D73A49;">+</span><span style="color:#22863A;font-weight:bold;">\\/</span><span style="color:#032F62;">)(</span><span style="color:#005CC5;">\\S</span><span style="color:#D73A49;">+</span><span style="color:#032F62;">)</span><span style="color:#22863A;font-weight:bold;">\\.</span><span style="color:#032F62;">vue/</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">exec</span><span style="color:#24292E;">(item.hotID)[</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">]).</span><span style="color:#6F42C1;">toLowerCase</span><span style="color:#24292E;">();</span></span>\n<span class="line"><span style="color:#24292E;">   Vue.</span><span style="color:#6F42C1;">component</span><span style="color:#24292E;">(</span><span style="color:#032F62;">`mv-${</span><span style="color:#24292E;">name</span><span style="color:#032F62;">}`</span><span style="color:#24292E;">, item);</span></span>\n<span class="line"><span style="color:#24292E;"> });</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h2 id="首字母大写" tabindex="-1">首字母大写 <a class="header-anchor" href="#首字母大写" aria-label="Permalink to &quot;首字母大写&quot;">​</a></h2><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Object.</span><span style="color:#B392F0;">keys</span><span style="color:#E1E4E8;">(components).</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">key</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> key.</span><span style="color:#B392F0;">replace</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">(</span><span style="color:#79B8FF;">\\w</span><span style="color:#DBEDFF;">)</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">,(</span><span style="color:#FFAB70;">v</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> v.</span><span style="color:#B392F0;">toUpperVase</span><span style="color:#E1E4E8;">()) </span><span style="color:#6A737D;">// 首字母大写</span></span>\n<span class="line"><span style="color:#E1E4E8;">    Vue.</span><span style="color:#B392F0;">component</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">`v${</span><span style="color:#E1E4E8;">name</span><span style="color:#9ECBFF;">}`</span><span style="color:#E1E4E8;">, components[key])</span></span>\n<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Object.</span><span style="color:#6F42C1;">keys</span><span style="color:#24292E;">(components).</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">((</span><span style="color:#E36209;">key</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> key.</span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(</span><span style="color:#032F62;">/(</span><span style="color:#005CC5;">\\w</span><span style="color:#032F62;">)/</span><span style="color:#24292E;">,(</span><span style="color:#E36209;">v</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> v.</span><span style="color:#6F42C1;">toUpperVase</span><span style="color:#24292E;">()) </span><span style="color:#6A737D;">// 首字母大写</span></span>\n<span class="line"><span style="color:#24292E;">    Vue.</span><span style="color:#6F42C1;">component</span><span style="color:#24292E;">(</span><span style="color:#032F62;">`v${</span><span style="color:#24292E;">name</span><span style="color:#032F62;">}`</span><span style="color:#24292E;">, components[key])</span></span>\n<span class="line"><span style="color:#24292E;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="利用require-context遍历目录所有图片" tabindex="-1">利用require.context遍历目录所有图片 <a class="header-anchor" href="#利用require-context遍历目录所有图片" aria-label="Permalink to &quot;利用require.context遍历目录所有图片&quot;">​</a></h2><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;"> G:\\Code\\Vue\\vue-global-component\\src\\assets&gt;tree /f卷 其它 的文件夹 PATH 列表</span></span>\n<span class="line"><span style="color:#e1e4e8;"> 卷序列号为 10081-0973</span></span>\n<span class="line"><span style="color:#e1e4e8;"> G:.</span></span>\n<span class="line"><span style="color:#e1e4e8;"> |  logo.png</span></span>\n<span class="line"><span style="color:#e1e4e8;"> |_ kittens</span></span>\n<span class="line"><span style="color:#e1e4e8;">        kitten1.jpg</span></span>\n<span class="line"><span style="color:#e1e4e8;">        kitten2.jpg</span></span>\n<span class="line"><span style="color:#e1e4e8;">        kitten3.jpg</span></span>\n<span class="line"><span style="color:#e1e4e8;">        kitten4.jpg</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;"> G:\\Code\\Vue\\vue-global-component\\src\\assets&gt;tree /f卷 其它 的文件夹 PATH 列表</span></span>\n<span class="line"><span style="color:#24292e;"> 卷序列号为 10081-0973</span></span>\n<span class="line"><span style="color:#24292e;"> G:.</span></span>\n<span class="line"><span style="color:#24292e;"> |  logo.png</span></span>\n<span class="line"><span style="color:#24292e;"> |_ kittens</span></span>\n<span class="line"><span style="color:#24292e;">        kitten1.jpg</span></span>\n<span class="line"><span style="color:#24292e;">        kitten2.jpg</span></span>\n<span class="line"><span style="color:#24292e;">        kitten3.jpg</span></span>\n<span class="line"><span style="color:#24292e;">        kitten4.jpg</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div>',19)];const t=s(e,[["render",function(s,l,p,e,t,r){return a(),n("div",null,o)}]]);export{p as __pageData,t as default};
