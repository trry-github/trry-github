import{_ as e,c as o,o as t,Q as d}from"./chunks/framework.30f3a391.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"src/前端笔记/js学习记录/TypeScript/16. 模块解析.md","filePath":"src/前端笔记/js学习记录/TypeScript/16. 模块解析.md","lastUpdated":1683717698000}'),a={name:"src/前端笔记/js学习记录/TypeScript/16. 模块解析.md"},r=[d('<h2 id="模块解析" tabindex="-1">模块解析 <a class="header-anchor" href="#模块解析" aria-label="Permalink to &quot;模块解析&quot;">​</a></h2><blockquote><p>这节假设你已经了解了模块的一些基本知识 请阅读模块文档了解更多信息。</p></blockquote><p>模块解析就是指编译器所要依据的一个流程，用它来找出某个导入操作所引用的具体值。假设有一个导入语句<code>import { a } from &quot;moduleA&quot;</code>;为了去检查任何对<code>a</code>的使用，编译器需要准确的知道它表示什么，并且会需要检查它的定义<code>moduleA</code>。</p><p>这时候，编译器会想知道“<code>moduleA</code>的shape是怎样的？”这听上去很简单，<code>moduleA</code>可能在你写的某个<code>.ts</code>/<code>.tsx</code>文件</p>',4)];const s=e(a,[["render",function(e,d,c,a,s,p){return t(),o("div",null,r)}]]);export{c as __pageData,s as default};
