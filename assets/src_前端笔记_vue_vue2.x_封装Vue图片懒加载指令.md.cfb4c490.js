import{_ as s,c as n,o as a,Q as e}from"./chunks/framework.30f3a391.js";const p=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"src/前端笔记/vue/vue2.x/封装Vue图片懒加载指令.md","filePath":"src/前端笔记/vue/vue2.x/封装Vue图片懒加载指令.md","lastUpdated":1683717698000}'),l={name:"src/前端笔记/vue/vue2.x/封装Vue图片懒加载指令.md"},t=[e('<h3 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h3><p>ok，兄弟们。前面一篇文章就说过要用指令的方式来实现图片的懒加载。其实，前端发展这么多年，要实现图片懒加载非常简单，配合上Vue的指令，30行轻轻松松实现一个高复用的Vue指令。一起来看看吧。</p><h3 id="v-imglazy" tabindex="-1">v-imgLazy <a class="header-anchor" href="#v-imglazy" aria-label="Permalink to &quot;v-imgLazy&quot;">​</a></h3><p>这里我是用intersectionObserber API去实现的。</p><blockquote><p>intersectionObserver 对象的observe()方法向intersectionObserver对象监听的目标集合添加一个元素。一个监听者有一组阈值和一个根，但是可以监视多个目标元素，以查看这些元素可见区域的变化。</p></blockquote><p>简单来说可以监听dom元素进出可视区域，并且可以控制具体的变化。</p><p>具体的使用请看<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Intersection_Observer_API" target="_blank" rel="noreferrer">IntersectionObserver API</a></p><p>新建一个directive用来存放自定义指令</p><blockquote><p>directive/imgLazy.js</p></blockquote><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">import baseImg form &#39;@/assets/logo.png&#39;</span></span>\n<span class="line"><span style="color:#e1e4e8;"></span></span>\n<span class="line"><span style="color:#e1e4e8;">// 创建一个监听器</span></span>\n<span class="line"><span style="color:#e1e4e8;">let obserer = new IntersectionObserver((entries)=&gt;{</span></span>\n<span class="line"><span style="color:#e1e4e8;">    // entries 是所有呗监听对象的集合</span></span>\n<span class="line"><span style="color:#e1e4e8;">    entries.forEach(entry) =&gt; {</span></span>\n<span class="line"><span style="color:#e1e4e8;">        if(entry.isIntersecting){</span></span>\n<span class="line"><span style="color:#e1e4e8;">            // 当被监听元素到临界值且未加载图片时触发。</span></span>\n<span class="line"><span style="color:#e1e4e8;">            !entry.target.isLoaded &amp;&amp; showImage(entry.target,entry.target.data_src)</span></span>\n<span class="line"><span style="color:#e1e4e8;">        }</span></span>\n<span class="line"><span style="color:#e1e4e8;">    }</span></span>\n<span class="line"><span style="color:#e1e4e8;">})</span></span>\n<span class="line"><span style="color:#e1e4e8;"></span></span>\n<span class="line"><span style="color:#e1e4e8;">function showImage(el,imgSrc){</span></span>\n<span class="line"><span style="color:#e1e4e8;">    const img = new Image();</span></span>\n<span class="line"><span style="color:#e1e4e8;">    img.src = imgSrc;</span></span>\n<span class="line"><span style="color:#e1e4e8;">    img.onload = () =&gt;{</span></span>\n<span class="line"><span style="color:#e1e4e8;">        el.src = imgSrc;</span></span>\n<span class="line"><span style="color:#e1e4e8;">        el.isLoaded = true;</span></span>\n<span class="line"><span style="color:#e1e4e8;">    }</span></span>\n<span class="line"><span style="color:#e1e4e8;">}</span></span>\n<span class="line"><span style="color:#e1e4e8;"></span></span>\n<span class="line"><span style="color:#e1e4e8;">export default {</span></span>\n<span class="line"><span style="color:#e1e4e8;">    // 这里用inserted 和 bind 都行，因为IntersectionObserver时异步的，以防意外还是用inserted好一点</span></span>\n<span class="line"><span style="color:#e1e4e8;">    //inserted和bind的区别在于inserted时元素已经插入页面，能够直接获取到dom元素的位置信息。</span></span>\n<span class="line"><span style="color:#e1e4e8;">    inserted(el,binding) {</span></span>\n<span class="line"><span style="color:#e1e4e8;">        // 初始化时展示默认图片</span></span>\n<span class="line"><span style="color:#e1e4e8;">        el.src = baseImg;</span></span>\n<span class="line"><span style="color:#e1e4e8;">        // 将需要加载的图片地址绑定在dom上</span></span>\n<span class="line"><span style="color:#e1e4e8;">        el.data_src = binding.value;</span></span>\n<span class="line"><span style="color:#e1e4e8;">        observer.observe(el)</span></span>\n<span class="line"><span style="color:#e1e4e8;">    },</span></span>\n<span class="line"><span style="color:#e1e4e8;">    unbind(){</span></span>\n<span class="line"><span style="color:#e1e4e8;">        // 停止监听</span></span>\n<span class="line"><span style="color:#e1e4e8;">        observer.disconnect();</span></span>\n<span class="line"><span style="color:#e1e4e8;">    }</span></span>\n<span class="line"><span style="color:#e1e4e8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">import baseImg form &#39;@/assets/logo.png&#39;</span></span>\n<span class="line"><span style="color:#24292e;"></span></span>\n<span class="line"><span style="color:#24292e;">// 创建一个监听器</span></span>\n<span class="line"><span style="color:#24292e;">let obserer = new IntersectionObserver((entries)=&gt;{</span></span>\n<span class="line"><span style="color:#24292e;">    // entries 是所有呗监听对象的集合</span></span>\n<span class="line"><span style="color:#24292e;">    entries.forEach(entry) =&gt; {</span></span>\n<span class="line"><span style="color:#24292e;">        if(entry.isIntersecting){</span></span>\n<span class="line"><span style="color:#24292e;">            // 当被监听元素到临界值且未加载图片时触发。</span></span>\n<span class="line"><span style="color:#24292e;">            !entry.target.isLoaded &amp;&amp; showImage(entry.target,entry.target.data_src)</span></span>\n<span class="line"><span style="color:#24292e;">        }</span></span>\n<span class="line"><span style="color:#24292e;">    }</span></span>\n<span class="line"><span style="color:#24292e;">})</span></span>\n<span class="line"><span style="color:#24292e;"></span></span>\n<span class="line"><span style="color:#24292e;">function showImage(el,imgSrc){</span></span>\n<span class="line"><span style="color:#24292e;">    const img = new Image();</span></span>\n<span class="line"><span style="color:#24292e;">    img.src = imgSrc;</span></span>\n<span class="line"><span style="color:#24292e;">    img.onload = () =&gt;{</span></span>\n<span class="line"><span style="color:#24292e;">        el.src = imgSrc;</span></span>\n<span class="line"><span style="color:#24292e;">        el.isLoaded = true;</span></span>\n<span class="line"><span style="color:#24292e;">    }</span></span>\n<span class="line"><span style="color:#24292e;">}</span></span>\n<span class="line"><span style="color:#24292e;"></span></span>\n<span class="line"><span style="color:#24292e;">export default {</span></span>\n<span class="line"><span style="color:#24292e;">    // 这里用inserted 和 bind 都行，因为IntersectionObserver时异步的，以防意外还是用inserted好一点</span></span>\n<span class="line"><span style="color:#24292e;">    //inserted和bind的区别在于inserted时元素已经插入页面，能够直接获取到dom元素的位置信息。</span></span>\n<span class="line"><span style="color:#24292e;">    inserted(el,binding) {</span></span>\n<span class="line"><span style="color:#24292e;">        // 初始化时展示默认图片</span></span>\n<span class="line"><span style="color:#24292e;">        el.src = baseImg;</span></span>\n<span class="line"><span style="color:#24292e;">        // 将需要加载的图片地址绑定在dom上</span></span>\n<span class="line"><span style="color:#24292e;">        el.data_src = binding.value;</span></span>\n<span class="line"><span style="color:#24292e;">        observer.observe(el)</span></span>\n<span class="line"><span style="color:#24292e;">    },</span></span>\n<span class="line"><span style="color:#24292e;">    unbind(){</span></span>\n<span class="line"><span style="color:#24292e;">        // 停止监听</span></span>\n<span class="line"><span style="color:#24292e;">        observer.disconnect();</span></span>\n<span class="line"><span style="color:#24292e;">    }</span></span>\n<span class="line"><span style="color:#24292e;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br></div></div><p>在main.js中使用，注册全局指令</p><blockquote><p>main.js</p></blockquote><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">import imgLazy from &#39;@/directive/imgLazy.js&#39;</span></span>\n<span class="line"><span style="color:#e1e4e8;"></span></span>\n<span class="line"><span style="color:#e1e4e8;">Vue.directive(&#39;imgLazy&#39;,imgLazy)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">import imgLazy from &#39;@/directive/imgLazy.js&#39;</span></span>\n<span class="line"><span style="color:#24292e;"></span></span>\n<span class="line"><span style="color:#24292e;">Vue.directive(&#39;imgLazy&#39;,imgLazy)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>在组件中定义directives使用，给当前组件注册指令</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">import imgLazy from &#39;@/directive/imgLazy.js&#39;</span></span>\n<span class="line"><span style="color:#e1e4e8;"></span></span>\n<span class="line"><span style="color:#e1e4e8;">export default {</span></span>\n<span class="line"><span style="color:#e1e4e8;">    //...</span></span>\n<span class="line"><span style="color:#e1e4e8;">    directives: {</span></span>\n<span class="line"><span style="color:#e1e4e8;">        imgLazy: imgLazy,</span></span>\n<span class="line"><span style="color:#e1e4e8;">    }</span></span>\n<span class="line"><span style="color:#e1e4e8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">import imgLazy from &#39;@/directive/imgLazy.js&#39;</span></span>\n<span class="line"><span style="color:#24292e;"></span></span>\n<span class="line"><span style="color:#24292e;">export default {</span></span>\n<span class="line"><span style="color:#24292e;">    //...</span></span>\n<span class="line"><span style="color:#24292e;">    directives: {</span></span>\n<span class="line"><span style="color:#24292e;">        imgLazy: imgLazy,</span></span>\n<span class="line"><span style="color:#24292e;">    }</span></span>\n<span class="line"><span style="color:#24292e;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>组件中使用</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">&lt;template&gt;</span></span>\n<span class="line"><span style="color:#e1e4e8;">    &lt;div class=&#39;container&#39;&gt; </span></span>\n<span class="line"><span style="color:#e1e4e8;">        &lt;div v-for=&quot;(item,index) in imgSrc&quot; :key=&quot;index&quot; &gt;</span></span>\n<span class="line"><span style="color:#e1e4e8;">            &lt;img v-imgLazy=&quot;item&quot;  /&gt;</span></span>\n<span class="line"><span style="color:#e1e4e8;">        &lt;/div&gt;</span></span>\n<span class="line"><span style="color:#e1e4e8;">    &lt;/div&gt;</span></span>\n<span class="line"><span style="color:#e1e4e8;">&lt;/template&gt;</span></span>\n<span class="line"><span style="color:#e1e4e8;"></span></span>\n<span class="line"><span style="color:#e1e4e8;">&lt;script&gt;</span></span>\n<span class="line"><span style="color:#e1e4e8;">import imgLazy from &#39;@/directive/imgLazy.js&#39;</span></span>\n<span class="line"><span style="color:#e1e4e8;">export default {</span></span>\n<span class="line"><span style="color:#e1e4e8;">    directives: { imgLazy: imgLazy,},</span></span>\n<span class="line"><span style="color:#e1e4e8;">    data() {</span></span>\n<span class="line"><span style="color:#e1e4e8;">        return {</span></span>\n<span class="line"><span style="color:#e1e4e8;">            imgSrc: [&quot;https://dss1.bdstatic.com/70cFvXSh_Q1YnxGkpoWK1HF6hhy/it/u=1091405991,859863778&amp;fm=26&amp;gp=0.jpg&quot;,&quot;https://dss1.bdstatic.com/70cFvXSh_Q1YnxGkpoWK1HF6hhy/it/u=2396395246,715775841&amp;fm=26&amp;gp=0.jpg&quot;,&quot;https://dss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=224866248,765861809&amp;fm=26&amp;gp=0.jpg&quot;,&quot;https://dss0.bdstatic.com/70cFuHSh_Q1YnxGkpoWK1HF6hhy/it/u=2670715487,1547868437&amp;fm=26&amp;gp=0.jpg&quot;,&quot;https://dss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=2988957523,3295751190&amp;fm=26&amp;gp=0.jpg&quot;,&quot;https://dss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=2698110318,782174384&amp;fm=26&amp;gp=0.jpg&quot;,&quot;https://dss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=1102788601,953675482&amp;fm=26&amp;gp=0.jpg&quot;,&quot;https://dss1.bdstatic.com/70cFvXSh_Q1YnxGkpoWK1HF6hhy/it/u=1091405991,859863778&amp;fm=26&amp;gp=0.jpg&quot;,&quot;https://dss1.bdstatic.com/70cFvXSh_Q1YnxGkpoWK1HF6hhy/it/u=2396395246,715775841&amp;fm=26&amp;gp=0.jpg&quot;,&quot;https://dss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=224866248,765861809&amp;fm=26&amp;gp=0.jpg&quot;,&quot;https://dss0.bdstatic.com/70cFuHSh_Q1YnxGkpoWK1HF6hhy/it/u=2670715487,1547868437&amp;fm=26&amp;gp=0.jpg&quot;,&quot;https://dss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=2988957523,3295751190&amp;fm=26&amp;gp=0.jpg&quot;,&quot;https://dss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=2698110318,782174384&amp;fm=26&amp;gp=0.jpg&quot;,&quot;https://dss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=1102788601,953675482&amp;fm=26&amp;gp=0.jpg&quot;,&quot;https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=2004055534,3969071219&amp;fm=26&amp;gp=0.jpg&quot;,]</span></span>\n<span class="line"><span style="color:#e1e4e8;">        }</span></span>\n<span class="line"><span style="color:#e1e4e8;">    }</span></span>\n<span class="line"><span style="color:#e1e4e8;">}</span></span>\n<span class="line"><span style="color:#e1e4e8;">&lt;/script&gt;</span></span>\n<span class="line"><span style="color:#e1e4e8;"></span></span>\n<span class="line"><span style="color:#e1e4e8;">&lt;style lang=&quot;scss&quot; scoped&gt;</span></span>\n<span class="line"><span style="color:#e1e4e8;">img {</span></span>\n<span class="line"><span style="color:#e1e4e8;">    width: 200px;</span></span>\n<span class="line"><span style="color:#e1e4e8;">    height: 200px;</span></span>\n<span class="line"><span style="color:#e1e4e8;">}</span></span>\n<span class="line"><span style="color:#e1e4e8;">&lt;/style&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">&lt;template&gt;</span></span>\n<span class="line"><span style="color:#24292e;">    &lt;div class=&#39;container&#39;&gt; </span></span>\n<span class="line"><span style="color:#24292e;">        &lt;div v-for=&quot;(item,index) in imgSrc&quot; :key=&quot;index&quot; &gt;</span></span>\n<span class="line"><span style="color:#24292e;">            &lt;img v-imgLazy=&quot;item&quot;  /&gt;</span></span>\n<span class="line"><span style="color:#24292e;">        &lt;/div&gt;</span></span>\n<span class="line"><span style="color:#24292e;">    &lt;/div&gt;</span></span>\n<span class="line"><span style="color:#24292e;">&lt;/template&gt;</span></span>\n<span class="line"><span style="color:#24292e;"></span></span>\n<span class="line"><span style="color:#24292e;">&lt;script&gt;</span></span>\n<span class="line"><span style="color:#24292e;">import imgLazy from &#39;@/directive/imgLazy.js&#39;</span></span>\n<span class="line"><span style="color:#24292e;">export default {</span></span>\n<span class="line"><span style="color:#24292e;">    directives: { imgLazy: imgLazy,},</span></span>\n<span class="line"><span style="color:#24292e;">    data() {</span></span>\n<span class="line"><span style="color:#24292e;">        return {</span></span>\n<span class="line"><span style="color:#24292e;">            imgSrc: [&quot;https://dss1.bdstatic.com/70cFvXSh_Q1YnxGkpoWK1HF6hhy/it/u=1091405991,859863778&amp;fm=26&amp;gp=0.jpg&quot;,&quot;https://dss1.bdstatic.com/70cFvXSh_Q1YnxGkpoWK1HF6hhy/it/u=2396395246,715775841&amp;fm=26&amp;gp=0.jpg&quot;,&quot;https://dss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=224866248,765861809&amp;fm=26&amp;gp=0.jpg&quot;,&quot;https://dss0.bdstatic.com/70cFuHSh_Q1YnxGkpoWK1HF6hhy/it/u=2670715487,1547868437&amp;fm=26&amp;gp=0.jpg&quot;,&quot;https://dss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=2988957523,3295751190&amp;fm=26&amp;gp=0.jpg&quot;,&quot;https://dss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=2698110318,782174384&amp;fm=26&amp;gp=0.jpg&quot;,&quot;https://dss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=1102788601,953675482&amp;fm=26&amp;gp=0.jpg&quot;,&quot;https://dss1.bdstatic.com/70cFvXSh_Q1YnxGkpoWK1HF6hhy/it/u=1091405991,859863778&amp;fm=26&amp;gp=0.jpg&quot;,&quot;https://dss1.bdstatic.com/70cFvXSh_Q1YnxGkpoWK1HF6hhy/it/u=2396395246,715775841&amp;fm=26&amp;gp=0.jpg&quot;,&quot;https://dss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=224866248,765861809&amp;fm=26&amp;gp=0.jpg&quot;,&quot;https://dss0.bdstatic.com/70cFuHSh_Q1YnxGkpoWK1HF6hhy/it/u=2670715487,1547868437&amp;fm=26&amp;gp=0.jpg&quot;,&quot;https://dss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=2988957523,3295751190&amp;fm=26&amp;gp=0.jpg&quot;,&quot;https://dss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=2698110318,782174384&amp;fm=26&amp;gp=0.jpg&quot;,&quot;https://dss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=1102788601,953675482&amp;fm=26&amp;gp=0.jpg&quot;,&quot;https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=2004055534,3969071219&amp;fm=26&amp;gp=0.jpg&quot;,]</span></span>\n<span class="line"><span style="color:#24292e;">        }</span></span>\n<span class="line"><span style="color:#24292e;">    }</span></span>\n<span class="line"><span style="color:#24292e;">}</span></span>\n<span class="line"><span style="color:#24292e;">&lt;/script&gt;</span></span>\n<span class="line"><span style="color:#24292e;"></span></span>\n<span class="line"><span style="color:#24292e;">&lt;style lang=&quot;scss&quot; scoped&gt;</span></span>\n<span class="line"><span style="color:#24292e;">img {</span></span>\n<span class="line"><span style="color:#24292e;">    width: 200px;</span></span>\n<span class="line"><span style="color:#24292e;">    height: 200px;</span></span>\n<span class="line"><span style="color:#24292e;">}</span></span>\n<span class="line"><span style="color:#24292e;">&lt;/style&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><p>intersectionObserver API 的兼容性方面基本上处理ie都兼容，所以说你如果想要在ie上实现懒加载就只能自己计算每一个元素了。</p>',18)];const c=s(l,[["render",function(s,e,p,l,c,o){return a(),n("div",null,t)}]]);export{p as __pageData,c as default};
