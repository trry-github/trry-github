import{_ as s,c as a,o as n,Q as e}from"./chunks/framework.30f3a391.js";const l=JSON.parse('{"title":"响应式系统工具","description":"","frontmatter":{},"headers":[],"relativePath":"src/前端笔记/vue/vue3.x/6. 响应式系统工具集.md","filePath":"src/前端笔记/vue/vue3.x/6. 响应式系统工具集.md","lastUpdated":1683717698000}'),o={name:"src/前端笔记/vue/vue3.x/6. 响应式系统工具集.md"},p=[e('<h1 id="响应式系统工具" tabindex="-1">响应式系统工具 <a class="header-anchor" href="#响应式系统工具" aria-label="Permalink to &quot;响应式系统工具&quot;">​</a></h1><h3 id="unref" tabindex="-1"><code>unref</code> <a class="header-anchor" href="#unref" aria-label="Permalink to &quot;`unref`&quot;">​</a></h3><p>如果参数是一个 ref 则返回它的 <code>value</code> , 否则返回参数本身，它是 <code>val = isRef(val) ? val.value : val</code> 的语法糖。</p><div class="language-typescript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">useFoo</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">x</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Ref</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;">&gt;) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">unwrapped</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">unref</span><span style="color:#E1E4E8;">(x) </span><span style="color:#6A737D;">// unwrapped 一定是 number 类型</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">useFoo</span><span style="color:#24292E;">(</span><span style="color:#E36209;">x</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Ref</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">number</span><span style="color:#24292E;">&gt;) {</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">unwrapped</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">unref</span><span style="color:#24292E;">(x) </span><span style="color:#6A737D;">// unwrapped 一定是 number 类型</span></span>\n<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="toref" tabindex="-1"><code>toRef</code> <a class="header-anchor" href="#toref" aria-label="Permalink to &quot;`toRef`&quot;">​</a></h3>',5)];const r=s(o,[["render",function(s,e,l,o,r,t){return n(),a("div",null,p)}]]);export{l as __pageData,r as default};
