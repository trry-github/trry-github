import{_ as s,c as n,o as a,Q as l}from"./chunks/framework.30f3a391.js";const p=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"src/前端笔记/js学习记录/node.js学习之路/API之fs文件系统.md","filePath":"src/前端笔记/js学习记录/node.js学习之路/API之fs文件系统.md","lastUpdated":1683717698000}'),o={name:"src/前端笔记/js学习记录/node.js学习之路/API之fs文件系统.md"},e=[l('<h2 id="fs-文件系统" tabindex="-1">fs (文件系统) <a class="header-anchor" href="#fs-文件系统" aria-label="Permalink to &quot;fs (文件系统)&quot;">​</a></h2><p><code>fs</code>模块提供了用于与文件系统进行交互（以类似于标准POSICX 函数的方式）的API。</p><p>要是用此模块：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">fs</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;fs&#39;</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">fs</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;fs&#39;</span><span style="color:#24292E;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>所有的文件系统操作都具有同步和异步的形式。</p><p>异步的形式总是把完成回调作为其最后一个参数。传给完成回调的参数取决于具体方法，但第一个参数总是预留给异常。如果操作被成功地完成，则第一个参数会为<code>null</code>或 <code>undefined</code>。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">fs</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;fs&#39;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">fs.</span><span style="color:#B392F0;">unlink</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;文件&#39;</span><span style="color:#E1E4E8;">, (</span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (err) </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> err;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;已成功的删除文件&#39;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">fs</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;fs&#39;</span><span style="color:#24292E;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">fs.</span><span style="color:#6F42C1;">unlink</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;文件&#39;</span><span style="color:#24292E;">, (</span><span style="color:#E36209;">err</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (err) </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> err;</span></span>\n<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;已成功的删除文件&#39;</span><span style="color:#24292E;">);</span></span>\n<span class="line"><span style="color:#24292E;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>当使用同步的操作时，发生的异常会被立即地抛出，可以使用<code>try...catch</code>处理，也可以冒泡。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">fs</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;fs&#39;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    fs.</span><span style="color:#B392F0;">unlinkSync</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;文件&#39;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;已成功地删除文件&#39;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (err) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 处理错误</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">fs</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;fs&#39;</span><span style="color:#24292E;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>\n<span class="line"><span style="color:#24292E;">    fs.</span><span style="color:#6F42C1;">unlinkSync</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;文件&#39;</span><span style="color:#24292E;">);</span></span>\n<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;已成功地删除文件&#39;</span><span style="color:#24292E;">);</span></span>\n<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (err) {</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 处理错误</span></span>\n<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>当使用异步地方法时，无法保证顺序。因此，以下地操作容易出错，因为<code>fs.stat()</code>操作可能在<code>fs.rename()</code>操作之前完成：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">fs.</span><span style="color:#B392F0;">rename</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;旧文件&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;新文件&#39;</span><span style="color:#E1E4E8;">, (</span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (err) </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> err;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;重命名完成&#39;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">});</span></span>\n<span class="line"><span style="color:#E1E4E8;">fs.</span><span style="color:#B392F0;">stat</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;新文件&#39;</span><span style="color:#E1E4E8;">, (</span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">stats</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (err) </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> err;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">`文件属性：${</span><span style="color:#79B8FF;">JSON</span><span style="color:#9ECBFF;">.</span><span style="color:#B392F0;">stringify</span><span style="color:#9ECBFF;">(</span><span style="color:#E1E4E8;">stats</span><span style="color:#9ECBFF;">)</span><span style="color:#9ECBFF;">}`</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">fs.</span><span style="color:#6F42C1;">rename</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;旧文件&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;新文件&#39;</span><span style="color:#24292E;">, (</span><span style="color:#E36209;">err</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (err) </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> err;</span></span>\n<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;重命名完成&#39;</span><span style="color:#24292E;">);</span></span>\n<span class="line"><span style="color:#24292E;">});</span></span>\n<span class="line"><span style="color:#24292E;">fs.</span><span style="color:#6F42C1;">stat</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;新文件&#39;</span><span style="color:#24292E;">, (</span><span style="color:#E36209;">err</span><span style="color:#24292E;">, </span><span style="color:#E36209;">stats</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (err) </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> err;</span></span>\n<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">`文件属性：${</span><span style="color:#005CC5;">JSON</span><span style="color:#032F62;">.</span><span style="color:#6F42C1;">stringify</span><span style="color:#032F62;">(</span><span style="color:#24292E;">stats</span><span style="color:#032F62;">)</span><span style="color:#032F62;">}`</span><span style="color:#24292E;">);</span></span>\n<span class="line"><span style="color:#24292E;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>若要正确地排序这些操作，则移动<code>fs.stat()</code>调用到<code>fs.rename()</code>操作地回调中：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">fs.</span><span style="color:#B392F0;">rename</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;旧文件&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;新文件&#39;</span><span style="color:#E1E4E8;">, (</span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(err) </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> err;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    fs.</span><span style="color:#B392F0;">stat</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;新文件&#39;</span><span style="color:#E1E4E8;">, (</span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">stats</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (err) </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> err;</span></span>\n<span class="line"><span style="color:#E1E4E8;">        console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">`文件属性：${</span><span style="color:#79B8FF;">JSON</span><span style="color:#9ECBFF;">.</span><span style="color:#B392F0;">stringify</span><span style="color:#9ECBFF;">(</span><span style="color:#E1E4E8;">stats</span><span style="color:#9ECBFF;">)</span><span style="color:#9ECBFF;">}`</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    })</span></span>\n<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">fs.</span><span style="color:#6F42C1;">rename</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;旧文件&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;新文件&#39;</span><span style="color:#24292E;">, (</span><span style="color:#E36209;">err</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(err) </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> err;</span></span>\n<span class="line"><span style="color:#24292E;">    fs.</span><span style="color:#6F42C1;">stat</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;新文件&#39;</span><span style="color:#24292E;">, (</span><span style="color:#E36209;">err</span><span style="color:#24292E;">, </span><span style="color:#E36209;">stats</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>\n<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (err) </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> err;</span></span>\n<span class="line"><span style="color:#24292E;">        console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">`文件属性：${</span><span style="color:#005CC5;">JSON</span><span style="color:#032F62;">.</span><span style="color:#6F42C1;">stringify</span><span style="color:#032F62;">(</span><span style="color:#24292E;">stats</span><span style="color:#032F62;">)</span><span style="color:#032F62;">}`</span><span style="color:#24292E;">);</span></span>\n<span class="line"><span style="color:#24292E;">    })</span></span>\n<span class="line"><span style="color:#24292E;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>在繁忙的进程中，应使用这些调用的异步版本。同步的版本会阻塞整个进程（停止所有的链接）,直到它们完成。</p><p>大多数异步的<code>fs</code>函数都可以省略回调参数。但是，不建议这么使用。当省略回调时，会使用默认的回调来抛出错误。若要获取对原始调用点的跟踪，则设置<code>NODE_DEBUG</code>环境变量：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ cat script.js</span></span>\n<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">bad</span><span style="color:#E1E4E8;">() {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;fs&#39;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">readFile</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;/&#39;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"><span style="color:#B392F0;">bad</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">$ env </span><span style="color:#79B8FF;">NODE_DEBUG</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">fs node script.js</span></span>\n<span class="line"><span style="color:#E1E4E8;">fs.js:</span><span style="color:#79B8FF;">88</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> backtrace;</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">^</span></span>\n<span class="line"><span style="color:#B392F0;">Error</span><span style="color:#E1E4E8;">: </span><span style="color:#B392F0;">EISDIR</span><span style="color:#E1E4E8;">: illegal operation on a directory, read</span></span>\n<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">stack</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">trace.&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ cat script.js</span></span>\n<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">bad</span><span style="color:#24292E;">() {</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;fs&#39;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">readFile</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;/&#39;</span><span style="color:#24292E;">);</span></span>\n<span class="line"><span style="color:#24292E;">}</span></span>\n<span class="line"><span style="color:#6F42C1;">bad</span><span style="color:#24292E;">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">$ env </span><span style="color:#005CC5;">NODE_DEBUG</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">fs node script.js</span></span>\n<span class="line"><span style="color:#24292E;">fs.js:</span><span style="color:#005CC5;">88</span></span>\n<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> backtrace;</span></span>\n<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">^</span></span>\n<span class="line"><span style="color:#6F42C1;">Error</span><span style="color:#24292E;">: </span><span style="color:#6F42C1;">EISDIR</span><span style="color:#24292E;">: illegal operation on a directory, read</span></span>\n<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">stack</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">trace.&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="文件路径" tabindex="-1">文件路径 <a class="header-anchor" href="#文件路径" aria-label="Permalink to &quot;文件路径&quot;">​</a></h3><p>大多数<code>fs</code> 操作接收的文件路径可以指定为字符串、buffer、或URL 对象（使用<code>file：</code>协议）。</p><p>字符串形式的路径被解释为 UTF-8 字符串序列（表示绝对或相对的文件名）。相对路径会相对于当前工作目录（由<code>process.cwd()</code>指定）进行处理。</p><p>在POSIX上使用绝对路径的示例：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">fs</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;fs&#39;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">fs.</span><span style="color:#B392F0;">open</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;/文件.txt&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;r&#39;</span><span style="color:#E1E4E8;">, (</span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">fd</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (err) </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> err;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    fs.</span><span style="color:#B392F0;">close</span><span style="color:#E1E4E8;">(fd, (</span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(err) </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> err;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    })</span></span>\n<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">fs</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;fs&#39;</span><span style="color:#24292E;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">fs.</span><span style="color:#6F42C1;">open</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;/文件.txt&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;r&#39;</span><span style="color:#24292E;">, (</span><span style="color:#E36209;">err</span><span style="color:#24292E;">, </span><span style="color:#E36209;">fd</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (err) </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> err;</span></span>\n<span class="line"><span style="color:#24292E;">    fs.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">(fd, (</span><span style="color:#E36209;">err</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>\n<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(err) </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> err;</span></span>\n<span class="line"><span style="color:#24292E;">    })</span></span>\n<span class="line"><span style="color:#24292E;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>在 POSIX 上使用相对路径（相对于<code>process.cwd()</code>）的示例：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">fs.</span><span style="color:#B392F0;">open</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;文件.txt&#39;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&#39;r&#39;</span><span style="color:#E1E4E8;">,(</span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">fd</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (err) </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> err;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    fs.</span><span style="color:#B392F0;">close</span><span style="color:#E1E4E8;">(fd, (</span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (err) </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> err;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    })</span></span>\n<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">fs.</span><span style="color:#6F42C1;">open</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;文件.txt&#39;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&#39;r&#39;</span><span style="color:#24292E;">,(</span><span style="color:#E36209;">err</span><span style="color:#24292E;">, </span><span style="color:#E36209;">fd</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (err) </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> err;</span></span>\n<span class="line"><span style="color:#24292E;">    fs.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">(fd, (</span><span style="color:#E36209;">err</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>\n<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (err) </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> err;</span></span>\n<span class="line"><span style="color:#24292E;">    })</span></span>\n<span class="line"><span style="color:#24292E;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>使用 Buffer 指定的路径主要用于将文件路径视为不透明字节学列的某些 POSIX 操作系统。在这些系统上，单个文件路径可以包含使用多种字符编码的子序列。与字符串路径一样， <code>Buffer</code> 路径也可以是相对或绝对的：</p><p>在 POSIX 上使用绝对路径的示例：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">fs.</span><span style="color:#B392F0;">open</span><span style="color:#E1E4E8;">(Buffer.</span><span style="color:#B392F0;">from</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;/文件.text&#39;</span><span style="color:#E1E4E8;">),</span><span style="color:#9ECBFF;">&#39;r&#39;</span><span style="color:#E1E4E8;">,(</span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">fd</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(err) </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> err;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    fs.</span><span style="color:#B392F0;">close</span><span style="color:#E1E4E8;">(fd, (</span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (err) </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> err;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    })</span></span>\n<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">fs.</span><span style="color:#6F42C1;">open</span><span style="color:#24292E;">(Buffer.</span><span style="color:#6F42C1;">from</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;/文件.text&#39;</span><span style="color:#24292E;">),</span><span style="color:#032F62;">&#39;r&#39;</span><span style="color:#24292E;">,(</span><span style="color:#E36209;">err</span><span style="color:#24292E;">, </span><span style="color:#E36209;">fd</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(err) </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> err;</span></span>\n<span class="line"><span style="color:#24292E;">    fs.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">(fd, (</span><span style="color:#E36209;">err</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>\n<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (err) </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> err;</span></span>\n<span class="line"><span style="color:#24292E;">    })</span></span>\n<span class="line"><span style="color:#24292E;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>在 Windows 上，Node.js 遵循独立驱动器工作目录的概念。当使用没有反斜杠的驱动器路径时，可以观察到此行为。例如，<code>fs.readdirSync(&#39;C:\\\\&#39;)</code> 可能会返回与<code>fs.readdirSync(&#39;C:&#39;)</code>不同的结果。详见</p><h3 id="url-对象的支持" tabindex="-1">URL 对象的支持 <a class="header-anchor" href="#url-对象的支持" aria-label="Permalink to &quot;URL 对象的支持&quot;">​</a></h3><p>对于大多数<code>fs</code> 模块的函数，<code>path</code> 或 <code>filename</code> 参数可以传入 WHATWG url 对象。仅支持使用 <code>file:</code> 协议的 URL 对象。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">fs</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;fs&#39;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">fileUrl</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">URL</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;file:///文件&#39;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">fs.</span><span style="color:#B392F0;">readFileSync</span><span style="color:#E1E4E8;">(fileUrl);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">fs</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;fs&#39;</span><span style="color:#24292E;">);</span></span>\n<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">fileUrl</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">URL</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;file:///文件&#39;</span><span style="color:#24292E;">);</span></span>\n<span class="line"></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">fs.</span><span style="color:#6F42C1;">readFileSync</span><span style="color:#24292E;">(fileUrl);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><code>file:</code> URL 始终时绝对路径。</p><p>使用 WHATWG url 对象可能会采用特定平台的行为。</p><p>在 Windows 上，带有主机名的<code>file：</code> URL 会转换为 UNC 路径， 而带有驱动器号的<code>file:</code> URL 会转换为本地的绝对路径。没有主机名和驱动器号的<code>file:</code> URL 会导致抛出错误：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 在 Windows 上：</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// - 带有主机名的 WHATWG 文件的 URL会转换为 UNC 路径。</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// file://主机名/文件 =&gt; \\\\主机名\\文件</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">fs.</span><span style="color:#B392F0;">readFileSync</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">URL</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;file://主机名/文件&#39;</span><span style="color:#E1E4E8;">));</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// - 带有驱动器号的 WHATWG 文件的 URL 会转换为绝对路径。</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// file:///C:/文件 =&gt; C:\\文件</span></span>\n<span class="line"><span style="color:#E1E4E8;">fs.</span><span style="color:#B392F0;">readFileSync</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">URL</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;file:///C:/文件&#39;</span><span style="color:#E1E4E8;">));</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// - 没有主机名的 WHATWG 文件的 URL 必须包含驱动器号。</span></span>\n<span class="line"><span style="color:#E1E4E8;">fs.</span><span style="color:#B392F0;">readFileSync</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">URL</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;file:///无驱动器号/文件&#39;</span><span style="color:#E1E4E8;">));</span></span>\n<span class="line"><span style="color:#E1E4E8;">fs.</span><span style="color:#B392F0;">readFileSync</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">URL</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;file:///文件&#39;</span><span style="color:#E1E4E8;">));</span></span>\n<span class="line"><span style="color:#6A737D;">// TypeError [ERR_INVALID_FILE_URL_PATH]: File URL path must be absolute</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 在 Windows 上：</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// - 带有主机名的 WHATWG 文件的 URL会转换为 UNC 路径。</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// file://主机名/文件 =&gt; \\\\主机名\\文件</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">fs.</span><span style="color:#6F42C1;">readFileSync</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">URL</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;file://主机名/文件&#39;</span><span style="color:#24292E;">));</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// - 带有驱动器号的 WHATWG 文件的 URL 会转换为绝对路径。</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// file:///C:/文件 =&gt; C:\\文件</span></span>\n<span class="line"><span style="color:#24292E;">fs.</span><span style="color:#6F42C1;">readFileSync</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">URL</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;file:///C:/文件&#39;</span><span style="color:#24292E;">));</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// - 没有主机名的 WHATWG 文件的 URL 必须包含驱动器号。</span></span>\n<span class="line"><span style="color:#24292E;">fs.</span><span style="color:#6F42C1;">readFileSync</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">URL</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;file:///无驱动器号/文件&#39;</span><span style="color:#24292E;">));</span></span>\n<span class="line"><span style="color:#24292E;">fs.</span><span style="color:#6F42C1;">readFileSync</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">URL</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;file:///文件&#39;</span><span style="color:#24292E;">));</span></span>\n<span class="line"><span style="color:#6A737D;">// TypeError [ERR_INVALID_FILE_URL_PATH]: File URL path must be absolute</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>带有驱动器号的<code>file:</code> URL 必须使用 <code>：</code>作为驱动器号后面的分隔符。使用其他分隔符会导致抛出错误。</p><p>在所有其他平台上，不支持带有主机名的<code>file:</code> URL, 使用时会导致抛出错误：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 在其他平台上：</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// - 不支持带有主机名的 WHATWG 文件的 URL。</span></span>\n<span class="line"><span style="color:#6A737D;">// file://主机名/文件 =&gt; 抛出错误！</span></span>\n<span class="line"><span style="color:#E1E4E8;">fs.</span><span style="color:#B392F0;">readFileSync</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">URL</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;file://主机名/文件&#39;</span><span style="color:#E1E4E8;">));</span></span>\n<span class="line"><span style="color:#6A737D;">// TypeError [ERR_INVALID_FILE_URL_PATH]: must be absolute</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// - WHATWG 文件的 URL 会转换为绝对路径。</span></span>\n<span class="line"><span style="color:#6A737D;">// file:///文件 =&gt; /文件</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">fs.</span><span style="color:#B392F0;">readFileSync</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">URL</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;file:///文件&#39;</span><span style="color:#E1E4E8;">));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 在其他平台上：</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// - 不支持带有主机名的 WHATWG 文件的 URL。</span></span>\n<span class="line"><span style="color:#6A737D;">// file://主机名/文件 =&gt; 抛出错误！</span></span>\n<span class="line"><span style="color:#24292E;">fs.</span><span style="color:#6F42C1;">readFileSync</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">URL</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;file://主机名/文件&#39;</span><span style="color:#24292E;">));</span></span>\n<span class="line"><span style="color:#6A737D;">// TypeError [ERR_INVALID_FILE_URL_PATH]: must be absolute</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// - WHATWG 文件的 URL 会转换为绝对路径。</span></span>\n<span class="line"><span style="color:#6A737D;">// file:///文件 =&gt; /文件</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">fs.</span><span style="color:#6F42C1;">readFileSync</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">URL</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;file:///文件&#39;</span><span style="color:#24292E;">));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>包含编码后的斜杆字符的<code>file:</code> URL 在所有平台上都会导致抛出错误:</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 在 Windows 上：</span></span>\n<span class="line"><span style="color:#E1E4E8;">fs.</span><span style="color:#B392F0;">readFileSync</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">URL</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;file:///C:/%2F&#39;</span><span style="color:#E1E4E8;">));</span></span>\n<span class="line"><span style="color:#E1E4E8;">fs.</span><span style="color:#B392F0;">readFileSync</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">URL</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;file:///C:/%2f&#39;</span><span style="color:#E1E4E8;">));</span></span>\n<span class="line"><span style="color:#6A737D;">/* TypeError [ERR_INVALID_FILE_URL_PATH]: File URL path must not include encoded</span></span>\n<span class="line"><span style="color:#6A737D;">\\ or / characters */</span></span>\n<span class="line"></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// 在 POSIX 上:</span></span>\n<span class="line"><span style="color:#E1E4E8;">fs.</span><span style="color:#B392F0;">readFileSync</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">URL</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;file:///%2F&#39;</span><span style="color:#E1E4E8;">));</span></span>\n<span class="line"><span style="color:#E1E4E8;">fs.</span><span style="color:#B392F0;">readFileSync</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">URL</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;file:///%2f&#39;</span><span style="color:#E1E4E8;">));</span></span>\n<span class="line"><span style="color:#6A737D;">/* TypeError [ERR_INVALID_FILE_URL_PATH]: File URL path must not include encoded</span></span>\n<span class="line"><span style="color:#6A737D;">/ characters */</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 在 Windows 上：</span></span>\n<span class="line"><span style="color:#24292E;">fs.</span><span style="color:#6F42C1;">readFileSync</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">URL</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;file:///C:/%2F&#39;</span><span style="color:#24292E;">));</span></span>\n<span class="line"><span style="color:#24292E;">fs.</span><span style="color:#6F42C1;">readFileSync</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">URL</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;file:///C:/%2f&#39;</span><span style="color:#24292E;">));</span></span>\n<span class="line"><span style="color:#6A737D;">/* TypeError [ERR_INVALID_FILE_URL_PATH]: File URL path must not include encoded</span></span>\n<span class="line"><span style="color:#6A737D;">\\ or / characters */</span></span>\n<span class="line"></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// 在 POSIX 上:</span></span>\n<span class="line"><span style="color:#24292E;">fs.</span><span style="color:#6F42C1;">readFileSync</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">URL</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;file:///%2F&#39;</span><span style="color:#24292E;">));</span></span>\n<span class="line"><span style="color:#24292E;">fs.</span><span style="color:#6F42C1;">readFileSync</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">URL</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;file:///%2f&#39;</span><span style="color:#24292E;">));</span></span>\n<span class="line"><span style="color:#6A737D;">/* TypeError [ERR_INVALID_FILE_URL_PATH]: File URL path must not include encoded</span></span>\n<span class="line"><span style="color:#6A737D;">/ characters */</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>在 Windows 上，包含编码后的反斜杠字符的<code>file:</code>URL会导致抛出错误:</p>',40)];const r=s(o,[["render",function(s,l,p,o,r,c){return a(),n("div",null,e)}]]);export{p as __pageData,r as default};
