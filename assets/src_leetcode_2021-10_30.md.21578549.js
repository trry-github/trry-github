import{_ as s,c as n,o as a,Q as l}from"./chunks/framework.30f3a391.js";const p=JSON.parse('{"title":"剑指 Offer 55 - I. 二叉树的深度","description":"","frontmatter":{"title":"剑指 Offer 55 - I. 二叉树的深度","sidebar":true},"headers":[],"relativePath":"src/leetcode/2021-10/30.md","filePath":"src/leetcode/2021-10/30.md","lastUpdated":1683796624000}'),e={name:"src/leetcode/2021-10/30.md"},o=[l('<h1 id="剑指-offer-55-i-二叉树的深度" tabindex="-1"><a href="https://leetcode-cn.com/problems/er-cha-shu-de-shen-du-lcof/" target="_blank" rel="noreferrer">剑指 Offer 55 - I. 二叉树的深度</a> <a class="header-anchor" href="#剑指-offer-55-i-二叉树的深度" aria-label="Permalink to &quot;[剑指 Offer 55 - I. 二叉树的深度](https://leetcode-cn.com/problems/er-cha-shu-de-shen-du-lcof/)&quot;">​</a></h1><ul><li>难度简单</li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>输入一棵二叉树的根节点，求该树的深度。从根节点到叶节点依次经过的节点（含根、叶节点）形成树的一条路径，最长路径的长度为树的深度。</p></div><p><strong>例如：</strong></p><p>给定二叉树 <code>[3,9,20,null,null,15,7]</code>，</p><div class="language-txt vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">    3</span></span>\n<span class="line"><span style="color:#e1e4e8;">   / \\</span></span>\n<span class="line"><span style="color:#e1e4e8;">  9  20</span></span>\n<span class="line"><span style="color:#e1e4e8;">    /  \\</span></span>\n<span class="line"><span style="color:#e1e4e8;">   15   7</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">    3</span></span>\n<span class="line"><span style="color:#24292e;">   / \\</span></span>\n<span class="line"><span style="color:#24292e;">  9  20</span></span>\n<span class="line"><span style="color:#24292e;">    /  \\</span></span>\n<span class="line"><span style="color:#24292e;">   15   7</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>返回它的最大深度 3 。</p><ol><li><code>节点总数 &lt;= 10000</code></li></ol><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/**</span></span>\n<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{TreeNode}</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">root</span></span>\n<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@return</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{number}</span></span>\n<span class="line"><span style="color:#6A737D;"> */</span></span>\n<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">maxDepth</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">root</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 递归退出条件</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">root) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Math.</span><span style="color:#B392F0;">max</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">maxDepth</span><span style="color:#E1E4E8;">(root.left), </span><span style="color:#B392F0;">maxDepth</span><span style="color:#E1E4E8;">(root.right)) </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>\n<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{TreeNode}</span><span style="color:#6A737D;"> </span><span style="color:#24292E;">root</span></span>\n<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@return</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{number}</span></span>\n<span class="line"><span style="color:#6A737D;"> */</span></span>\n<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">maxDepth</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">root</span><span style="color:#24292E;">) {</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 递归退出条件</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">root) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">max</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">maxDepth</span><span style="color:#24292E;">(root.left), </span><span style="color:#6F42C1;">maxDepth</span><span style="color:#24292E;">(root.right)) </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>\n<span class="line"><span style="color:#24292E;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div>',9)];const r=s(e,[["render",function(s,l,p,e,r,c){return a(),n("div",null,o)}]]);export{p as __pageData,r as default};
